{"ast":null,"code":"import * as React from 'react';\nimport { debounce, ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector } from '../columns';\nimport { gridDensityHeaderHeightSelector, gridDensityRowHeightSelector } from '../density';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nconst isTestEnvironment = process.env.NODE_ENV === 'test';\n\nconst hasScroll = _ref => {\n  let {\n    content,\n    container,\n    scrollBarSize\n  } = _ref;\n  const hasScrollXIfNoYScrollBar = content.width > container.width;\n  const hasScrollYIfNoXScrollBar = content.height > container.height;\n  let hasScrollX = false;\n  let hasScrollY = false;\n\n  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n    hasScrollX = hasScrollXIfNoYScrollBar;\n    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height; // We recalculate the scroll x to consider the size of the y scrollbar.\n\n    if (hasScrollY) {\n      hasScrollX = content.width + scrollBarSize > container.width;\n    }\n  }\n\n  return {\n    hasScrollX,\n    hasScrollY\n  };\n};\n\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(null);\n  const fullDimensionsRef = React.useRef(null);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const updateGridDimensionsRef = React.useCallback(() => {\n    var _apiRef$current$rootE;\n\n    const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n\n    if (!rootDimensionsRef.current) {\n      return;\n    }\n\n    let scrollBarSize;\n\n    if (props.scrollbarSize != null) {\n      scrollBarSize = props.scrollbarSize;\n    } else if (!columnsTotalWidth || !rootElement) {\n      scrollBarSize = 0;\n    } else {\n      const doc = ownerDocument(rootElement);\n      const scrollDiv = doc.createElement('div');\n      scrollDiv.style.width = '99px';\n      scrollDiv.style.height = '99px';\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.overflow = 'scroll';\n      scrollDiv.className = 'scrollDiv';\n      rootElement.appendChild(scrollDiv);\n      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      rootElement.removeChild(scrollDiv);\n    }\n\n    let viewportOuterSize;\n    let hasScrollX;\n    let hasScrollY;\n\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > rootDimensionsRef.current.width;\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height - headerHeight\n      };\n      const scrollInformation = hasScroll({\n        content: {\n          width: Math.round(columnsTotalWidth),\n          height: rowsMeta.currentPageTotalHeight\n        },\n        container: viewportOuterSize,\n        scrollBarSize\n      });\n      hasScrollY = scrollInformation.hasScrollY;\n      hasScrollX = scrollInformation.hasScrollX;\n    }\n\n    const viewportInnerSize = {\n      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),\n      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)\n    };\n    const newFullDimensions = {\n      viewportOuterSize,\n      viewportInnerSize,\n      hasScrollX,\n      hasScrollY,\n      scrollBarSize\n    };\n    const prevDimensions = fullDimensionsRef.current;\n    fullDimensionsRef.current = newFullDimensions;\n\n    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);\n    }\n  }, [apiRef, props.scrollbarSize, props.autoHeight, headerHeight, rowsMeta.currentPageTotalHeight]);\n  const resize = React.useCallback(() => {\n    updateGridDimensionsRef();\n    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n  }, [apiRef, updateGridDimensionsRef]);\n  const getRootDimensions = React.useCallback(() => fullDimensionsRef.current, []);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return 0;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    }); // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n\n    if (props.getRowHeight) {\n      const renderContext = apiRef.current.unstable_getRenderContext();\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / gridDensityRowHeightSelector(apiRef));\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight]);\n  const dimensionsApi = {\n    resize,\n    getRootDimensions,\n    unstable_getViewportPageSize: getViewportPageSize,\n    unstable_updateGridDimensionsRef: updateGridDimensionsRef\n  };\n  useGridApiMethod(apiRef, dimensionsApi, 'GridDimensionsApi');\n  const debounceResize = React.useMemo(() => debounce(resize, 60), [resize]);\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size; // jsdom has no layout capabilities\n\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n\n    if (isTestEnvironment) {\n      // We don't need to debounce the resize for tests.\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    debounceResize();\n  }, [props.autoHeight, debounceResize, logger, resize]);\n  useEnhancedEffect(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'pageChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'pageSizeChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}","map":{"version":3,"names":["React","debounce","ownerDocument","unstable_useEnhancedEffect","useEnhancedEffect","useGridApiEventHandler","useGridApiOptionHandler","useGridApiMethod","useGridLogger","gridColumnsTotalWidthSelector","gridDensityHeaderHeightSelector","gridDensityRowHeightSelector","useGridSelector","getVisibleRows","gridRowsMetaSelector","isTestEnvironment","process","env","NODE_ENV","hasScroll","content","container","scrollBarSize","hasScrollXIfNoYScrollBar","width","hasScrollYIfNoXScrollBar","height","hasScrollX","hasScrollY","useGridDimensions","apiRef","props","logger","errorShown","useRef","rootDimensionsRef","fullDimensionsRef","rowsMeta","headerHeight","updateGridDimensionsRef","useCallback","_apiRef$current$rootE","rootElement","current","rootElementRef","columnsTotalWidth","scrollbarSize","doc","scrollDiv","createElement","style","position","overflow","className","appendChild","offsetWidth","clientWidth","removeChild","viewportOuterSize","autoHeight","Math","round","currentPageTotalHeight","scrollInformation","viewportInnerSize","newFullDimensions","prevDimensions","publishEvent","resize","getRootDimensions","getViewportPageSize","dimensions","currentPage","pagination","paginationMode","getRowHeight","renderContext","unstable_getRenderContext","viewportPageSize","lastRowIndex","firstRowIndex","min","rows","length","maximumPageSizeWithoutScrollBar","floor","dimensionsApi","unstable_getViewportPageSize","unstable_updateGridDimensionsRef","debounceResize","useMemo","isFirstSizing","handleResize","size","isJSDOM","test","window","navigator","userAgent","error","join","onResize"],"sources":["C:/Users/Lorenzo/Desktop/Learn/pern/yelp_clone/client/node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js"],"sourcesContent":["import * as React from 'react';\nimport { debounce, ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector } from '../columns';\nimport { gridDensityHeaderHeightSelector, gridDensityRowHeightSelector } from '../density';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nconst isTestEnvironment = process.env.NODE_ENV === 'test';\n\nconst hasScroll = ({\n  content,\n  container,\n  scrollBarSize\n}) => {\n  const hasScrollXIfNoYScrollBar = content.width > container.width;\n  const hasScrollYIfNoXScrollBar = content.height > container.height;\n  let hasScrollX = false;\n  let hasScrollY = false;\n\n  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n    hasScrollX = hasScrollXIfNoYScrollBar;\n    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height; // We recalculate the scroll x to consider the size of the y scrollbar.\n\n    if (hasScrollY) {\n      hasScrollX = content.width + scrollBarSize > container.width;\n    }\n  }\n\n  return {\n    hasScrollX,\n    hasScrollY\n  };\n};\n\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(null);\n  const fullDimensionsRef = React.useRef(null);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const updateGridDimensionsRef = React.useCallback(() => {\n    var _apiRef$current$rootE;\n\n    const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n\n    if (!rootDimensionsRef.current) {\n      return;\n    }\n\n    let scrollBarSize;\n\n    if (props.scrollbarSize != null) {\n      scrollBarSize = props.scrollbarSize;\n    } else if (!columnsTotalWidth || !rootElement) {\n      scrollBarSize = 0;\n    } else {\n      const doc = ownerDocument(rootElement);\n      const scrollDiv = doc.createElement('div');\n      scrollDiv.style.width = '99px';\n      scrollDiv.style.height = '99px';\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.overflow = 'scroll';\n      scrollDiv.className = 'scrollDiv';\n      rootElement.appendChild(scrollDiv);\n      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      rootElement.removeChild(scrollDiv);\n    }\n\n    let viewportOuterSize;\n    let hasScrollX;\n    let hasScrollY;\n\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > rootDimensionsRef.current.width;\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height - headerHeight\n      };\n      const scrollInformation = hasScroll({\n        content: {\n          width: Math.round(columnsTotalWidth),\n          height: rowsMeta.currentPageTotalHeight\n        },\n        container: viewportOuterSize,\n        scrollBarSize\n      });\n      hasScrollY = scrollInformation.hasScrollY;\n      hasScrollX = scrollInformation.hasScrollX;\n    }\n\n    const viewportInnerSize = {\n      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),\n      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)\n    };\n    const newFullDimensions = {\n      viewportOuterSize,\n      viewportInnerSize,\n      hasScrollX,\n      hasScrollY,\n      scrollBarSize\n    };\n    const prevDimensions = fullDimensionsRef.current;\n    fullDimensionsRef.current = newFullDimensions;\n\n    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);\n    }\n  }, [apiRef, props.scrollbarSize, props.autoHeight, headerHeight, rowsMeta.currentPageTotalHeight]);\n  const resize = React.useCallback(() => {\n    updateGridDimensionsRef();\n    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n  }, [apiRef, updateGridDimensionsRef]);\n  const getRootDimensions = React.useCallback(() => fullDimensionsRef.current, []);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return 0;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    }); // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n\n    if (props.getRowHeight) {\n      const renderContext = apiRef.current.unstable_getRenderContext();\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / gridDensityRowHeightSelector(apiRef));\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight]);\n  const dimensionsApi = {\n    resize,\n    getRootDimensions,\n    unstable_getViewportPageSize: getViewportPageSize,\n    unstable_updateGridDimensionsRef: updateGridDimensionsRef\n  };\n  useGridApiMethod(apiRef, dimensionsApi, 'GridDimensionsApi');\n  const debounceResize = React.useMemo(() => debounce(resize, 60), [resize]);\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size; // jsdom has no layout capabilities\n\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n\n    if (isTestEnvironment) {\n      // We don't need to debounce the resize for tests.\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    debounceResize();\n  }, [props.autoHeight, debounceResize, logger, resize]);\n  useEnhancedEffect(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'pageChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'pageSizeChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}